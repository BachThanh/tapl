

=========================================
1. Basic numeric expression (기본 산술 식)
=========================================

# open Base;;
# 3 + 4 ;;
- : Base.Int.t = 7
# 8 / 3 ;;
- : Base.Int.t = 2
# 3.5 +. 6. ;;
- : Base.Float.t = 9.5
# 3 * 5 > 14 ;;
- : bool = true
#
#


===================================
2. Local variables (지역 변수, 함수)
===================================

 - nested local variables

let x = 3 + 4 ;;
val x : int = 7
# x ;;
- : int = 7
# x + 10 ;;
- : int = 17
# let x = let y = 1 + 2 in y + 3;;
val x : int = 6

====================================
3. Functions and type inference  [X]
====================================

# let square x = x * x;;
val square : int -> int = <fun>

   ===> local function, square, (지역함수 square) !!
   ===> x는 함수 인자

   ===> int -> int   Given an int argument, it returns an int result!!
                     (int 인자를 받아 int 결과를 내는 함수 타입)

   ===> type inference !! (타입 유추)
        It is not always necessary for programmers to write types explicitly
        (프로그래머가 타입을 항상 명시적으로 작성할 필요가 없다.))

let ratio x y = x /. y ;;
val ratio : float -> float -> float = <fun>

   ===> /. : float-point number division !!   (/.는 실수 나누기 연산자)
   ===> So, x and y must be float numbers and
        the result of the division is a float number !!
        (따라서 x와 y가 실수여야 하겠지요. 나누기 결과도 실수!!)
   ===> As a result, ratio has type
         float -> float -> float

        (그 결과 ratio 함수는 위의 타입을 갖는다.)



# square 2 ;;
- : int = 4
# square 3 ;;
- : int = 9

===============================================
4. Tuples, lists, options, and pattern matching
===============================================

[Tuples]==========================================


 (3, "three") ;;
- : int * string = (3, "three")

  (3, "three") ===> Tuple value (튜플)
  int * string  ===> tuple type (튜플 타입)

# (3, "four", 5) ;;
- : int * string * int = (3, "four", 5)

  (3, "four", 5) ===> Tuple value (튜플)
  int * string * int  ===> tuple type

(3, (5, "five"), 7);;
- : int * (int * string) * int = (3, (5, "five"), 7)


[Tuple patterns (튜플 패턴)]==========================


let (x,y) = (1,2) ;;

 x ===> 1
 y ===> 2

let mymove (x,y) = (x-100,y+100) ;;
val mymove : int * int -> int * int = <fun>

# let distance (x1,y1) (x2,y2) =
   Float.sqrt ((x1 -. x2) *. (x1 -. x2) +. (y1 -. y2) *. (y1 -. y2) )


 -- In the function distance,

      (x1,y1) and (x2,y2) are patterns for tuples (pairs).
      튜플 패턴

# distance (1., 2.) (3., 4.) ;;
- : float = 2.8284271247461903



[List and list patterns]=======================================


let languages = [ "OCaml" ; "Perl" ; "C" ] ;;
val languages : string list = ["OCaml"; "Perl"; "C"]

   [ "OCaml" ; "Perl" ; "C" ] ==> a list of three stings !!
                                  (3개의 문자열로 구성된 리스트)
   string list ==> string list type !!!
                   (문자열을 원소로 하는 리스트 타입)

List module

# List.map ;;
- : ('a -> 'b) -> 'a list -> 'b list = <fun>

   The type of the 1st argument: 'a -> 'b
   The type of the 2nd argument: 'a list

   'a, 'b : type variables (타입 변수)

utop[14]> [1;2;3];;
- : int list = [1; 2; 3]
utop[15]> ["one";"two";"three"];;
- : string list = ["one"; "two"; "three"]
utop[16]> let f x = x + 2;;
val f : int -> int = <fun>
utop[17]> let g s = String.length s ;;
val g : string -> int = <fun>
utop[18]> List.map f [1;2;3];;
- : int list = [3; 4; 5]
utop[19]> List.map g ["one"; "two"; "three"] ;;
- : int list = [3; 3; 5]
utop[20]> List.map ;;
- : ('a -> 'b) -> 'a list -> 'b list = <fun>


# List.map String.length languages ;;
- : int list = [5; 4; 1]
# languages ;;
- : string list = ["OCaml"; "Perl"; "C"]
# String.length "OCaml";;
- : int = 5
# String.length "Perl";;
- : int = 4
# String.length "C";;
- : int = 1


"French" :: "Spanish" :: languages ;;
- : string list = ["French"; "Spanish"; "OCaml"; "Perl"; "C"]

(::) : 'a -> 'a list -> 'a list

 - To make a new list from an element and a list
   (1개 원소와 1개 리스트를 받아 새로운 리스트를 만듬!)

1 :: [] ;;
- : int list = [1]
# 1 :: 2 :: [] ;;
- : int list = [1; 2]
#

[1;2;3] @ [4;5;6]

 @ ===> To concate two lists
        (두 리스트를 받아 붙여 하나의 리스트를 만듬!!)


[List patterns (리스트 패턴)]===========================


let my_favorite l =
  match l with
  |  [] -> "OCaml"
  |  x :: xs -> x

val my_favorite : string list -> string = <fun>

# my_favorite languages ;;
- : string = "OCaml"


[Recursive list functions]

let rec sum l =
  match l with
  | [] -> 0
  | x :: xs -> x + sum xs

val sum : int list -> int = <fun>

 ===> l has type int list (l은 정수를 원소로 하는 리스트)

cf. rec ===> recusive function (재귀 함수)

[1;2;3;4;5];;
- : int list = [1; 2; 3; 4; 5]
# sum [1;2;3;4;5];;
- : int = 15
#


- polymorphic function (폴리모픽 함수, 다형 함수)

let rec mylen l =
            match l with
            | [] -> 0
            | x :: xs -> 1 + mylen xs ;;

val mylen : 'a list -> int = <fun>
utop[27]> [1, 2, 3];;
- : (int * int * int) list = [(1, 2, 3)]
utop[28]> [1;2;3];;
- : int list = [1; 2; 3]
utop[29]> ["1";"2";"3"];;
- : string list = ["1"; "2"; "3"]
utop[30]> mylen [1;2;3];;
- : int = 3
utop[31]> mylen ["1";"2";"3"];;
- : int = 3


cf. mylen is called a polymorphic function.
    (mylen : 'a list ->  int)


==========
3. Options
==========


option is a common type in O'Caml.
The values of option type is either Some v or None.

  Some 1;;
- : int option = Some 1
# 1 ;;
- : int = 1
#  None : int option ;;
Line 1, characters 6-7:
1 |  None : int option ;;
          ^
Error: Syntax error
#  None :: int option ;;
Line 1, characters 9-12:
1 |  None :: int option ;;
             ^^^
Error: Unbound value int
#  (None : int option);;
- : int option = None
#

 - Initial problematic version
     let mydiv x y = x / y

function type
 - int -> int -> int option

 - An improved version using optional values

  let mydiv x y = if y = 0 then None else Some (x / y)

let retNone x = None ;;
val retNone : 'a -> 'b option = <fun>
utop[56]> let f opt =
            match opt with
            | None -> 0
            | Some x -> x;;
val f : int option -> int = <fun>
utop[57]> f (Some 1);;
- : int = 1
utop[58]> f None;;
- : int = 0
utop[59]>

=======================
4. Records and vairants
=======================


primitive types

 - int
 - bool
 - char
 - string
 - tuple type


[Tuple types]

# (1, 'a', "hello") ;;
- : int * char * string = (1, a, "hello")


  (1, 'a', "hello") ===> Tuple !!!
  int * char * string ===> Tupel type !!!

(1, 2, 3, 'a', 'b' , "c") ;;
- : int * int * int * char * char * string = (1, 2, 3, a, b, "c")


[List types]


[user-defined types]
 - record types
 - variant types

User-defeind type names

 In C, you have 'typedef' that allows you to define a type name!

 typedef int MONEY;   // typedef [기존 타입 이름] [새로운 타입 이름]

 MONEY x;    // instead of int x; !!!


[Record types]
 - type point2d = { x : float; y : float }

    ==> record type!!!
    ==> x and y are fields!!!
    ==> x and y have floa type.

let p = { x = 3. ; y = -4. };;

    ==> record value !!!
    ==> The value of the field x is 3.0
    ==> The value of the field y is -4.0


let select_x r = r.x  ;;
val select_x : point2d -> float = <fun>

    ==> r.x (assuming r is a record) is a selection of the field x from the record. !!!!

# select_x p ;;;
- : float = 3.
# let select_y r = r.y ;;
val select_y : point2d -> float = <fun>

    ==> r.y (assuming r is a record) is a selection of the field y from the record. !!!!


# select_y p ;;
- : float = -4.


let move r = {x = r.x +. 10. ; y = r.y +. 10. };;
val move : point2d -> point2d = <fun>

    ==> record argument, r !!

# move p ;;
- : point2d = {x = 13.; y = 6.}
# p;;
- : point2d = {x = 3.; y = -4.}

# let move {x=x_value ; y=y_value} = {x = x_value +. 10.; y = y_value +. 10. };;
val move : point2d -> point2d = <fun>

    ==> record pattern, {x=x_value ; y=y_value} !!


# move p;;
- : point2d = {x = 13.; y = 6.}
#

Variant types


type day =    ===> The type name must not begin with a capital letter !!!
    Sunday    ===> Sunday is called a data construcor!!
                   Every data constructor must begin with a capital letter!!!
  | Monday    ===> Monday is another data constructor!!
  | Tuesday
  | Wednesday
  | Thursday
  | Friday
  | Saturday

#  Sunday;;
- : day = Sunday
# Tuesday ;;
- : day = Tuesday

type day =       # day: You defined the name, day!
    Sunday       #
  | Monday       # Sunday, Monday, ... Saturday
  | Tuesday      #    ===> Values, Constructors, Constructor value.
  | Wednesday
  | Thursday
  | Friday
  | Saturday


let holiday d =
     match d with
     | Sunday -> true
     | Monday -> false
     | Tuesday -> false
     | Wednesday -> false
     | Thursday -> false
     | Friday -> false
     | Saturday -> true

Sunday ~ Saturday are values called *constructors*!

 - day 타입에서 정의한 Sunday부터 Saturday까지를
   값(value)이라고 부르거나
   컨트스트럭터(constructor)라고 부릅니다.

let holiday d =
     match d with
     | Sunday -> true
     | Monday -> false
     | Tuesday -> false
     | Wednesday -> false
     | Thursday -> false
     | Friday -> false
     | Saturday -> true
;;

 type int_binary_tree =
   | Empty
   | Node of int * int_binary_tree * int_binary_tree


 - int_binary_tree 타입에서 Empty와 Node를 컨스트럭터라고 부릅니다.
   컨스트럭터는 일반적으로 인자를 갖을 수 있습니다!


   ===> Empty and Node are data constructors !!!
   ===> A data constructor can have one or more arguments!!!

  1
 / \
2   3
   / \
   *  4

#  type int_binary_tree =
   | Empty
   | Node of int * int_binary_tree * int_binary_tree
;;
      type int_binary_tree =
    Empty
  | Node of int * int_binary_tree * int_binary_tree
# Empty;;
- : int_binary_tree = Empty

utop[63]>  type int_binary_tree =
   | Empty
   | Node of int * int_binary_tree * int_binary_tree
;;
type int_binary_tree =
    Empty
  | Node of int * int_binary_tree * int_binary_tree
utop[64]> Empty;;
- : int_binary_tree = Empty
utop[65]> Node ;;
Line 1, characters 0-4:
Error: The constructor Node expects 3 argument(s),
       but is applied here to 0 argument(s)
utop[66]> Node (1, Empty, Empty);;
- : int_binary_tree = Node (1, Empty, Empty)
utop[67]>

let rec nodecount t =
     match t with
     | Empty -> 0
     | Node (i, left_tree, right_tree) ->
        1 + nodecount left_tree  + nodecount right_tree;;

val nodecount : int_binary_tree -> int = <fun>

nodecount (Node (123, Empty, Empty)) ;;
- : int = 1
utop[76]> nodecount Empty ;;
- : int = 0
utop[77]> nodecount (Node (1, Node (2, Empty, Empty), Node (3, Empty, Node (4, Empty, Empty))) ) ;;
- : int = 4
utop[78]>


e
===> 9월 15일
